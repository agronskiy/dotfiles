" Some random settings, mostly copied over from various nice resources.

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')
Plug 'agronskiy/vim-code-dark'      " Slightly modified from 'tomasiser/vim-code-dark'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Lightline for buffers etc
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

Plug 'tpope/vim-commentary'         " Comments

" File browser
Plug 'scrooloose/nerdtree'

" Undo tree
Plug 'mbbill/undotree'

" Git related
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" FZF support
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'chengzeyi/fzf-preview.vim'  " Better preview support

" Multiple cources
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Vim start page
Plug 'mhinz/vim-startify'

call plug#end()

" TODO(agronskiy): need to understand the below, blindly copied from https://stevelosh.com/blog/2010/09/coming-home-to-vim/#s1-some-background-about-me
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

filetype plugin indent on

colorscheme codedark
syntax on

set nocompatible

set modelines=0

" Undo, backup and co
if !isdirectory($HOME.'/.vim/.undo')
    call mkdir( $HOME.'/.vim/.undo', "p")
endif
set undodir=~/.vim/.undo/,/tmp//
set undofile

set noswapfile
set nobackup

" Standard stuff a.k.a. common sense
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" TODO(agronskiy): not really gone through all of them
set encoding=utf-8
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set laststatus=2

" Make 0 go to the first character rather than the beginning of the line. When
" than empty space. If you want the traditional beginning of line, use ^.
nnoremap 0 ^
nnoremap ^ 0

" Behavior of visual margins to top/bottom when scrolling
set scrolloff=6         " Start scrolling when we're N lines away from margins
set sidescroll=5        " Do the same thing for sideways scrolling
set sidescrolloff=15

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Write buffer when losing focus
augroup AutoWrite
    autocmd! BufLeave * :update
augroup END
set autowrite

" This sets hybrid line numbering, see https://jeffkreeftmeijer.com/vim-number/
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Save on losing focus
au  FocusLost * silent! wa

" Timeout - wait indefinitely after leader pressed
set notimeout
set ttimeout
let mapleader = " "

" Make vim use standard regexp when searching
nnoremap / /\v
vnoremap / /\v

" Other searching capabilities
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

set wrap
set textwidth=119
set formatoptions=qrn1
set colorcolumn=120

" Standard way of navigating wrapped lines.
nnoremap j gj
nnoremap k gk

" F1 to escape
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap ; :

" Strip trailing spaces
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Fast exit from the insert mode
inoremap jk <ESC>

" Create window, navigate windows
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" w!! to write a file as sudo
" stolen from Steve Losh
cmap w!! w !sudo tee % >/dev/null

" Toggle NERDTree using Ctrl-T.
nnoremap <C-T> :NERDTreeToggle<CR>

" Automatically quit if the only window left is NERDTree
" NOTE(agronskiy) commented out because this kills the whole VIM if one accidentally closes the NERDTree buffer
"   (i.e. `:bd` when focused in the NERDTree)
"
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NerdTree configuration
let NERDTreeShowHidden=1
let g:NERDTreeWinPos = "right"
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeWinSize=40

" Configure lightline
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"ðŸ”’":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*FugitiveHead")?FugitiveHead():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())'
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['close'] ]
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel'
      \ }
      \ }

" Configure tabs for lightline
set showtabline=2
let g:lightline#bufferline#show_number=1

" Update time for gitgutter
set updatetime=100

" FZF bindings
nnoremap <leader>ff            :FZFFiles<CR>
nnoremap <leader>bb            :Buffers<CR>
nnoremap <leader>ll            :FZFBLines<CR>
nnoremap <leader>LL            :Lines<CR>
nnoremap <leader>rg            :FZFRg<CR>
nnoremap <leader>hh            :FZFHistory<CR>

" Other buffer-related bindings
nnoremap <silent> <leader>bn            :enew<CR>

" Buffer closing
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nnoremap <leader>bq :<C-U>bp <BAR> bd #<CR>
" Buffer only - all other buffers will be closed
command BufOnly silent! execute "%bd|e#|bd#"
nnoremap <leader>bo :BufOnly<CR>

" Show list and offer to choose by number (alternative to the above FZF)
nnoremap <leader>BB :ls<CR>:b<Space>

" If you visually select something and hit paste that thing gets yanked into
" your buffer. This generally is annoying when you're copying one item and
" repeatedly pasting it. This changes the paste command in visual mode so that
" it doesn't overwrite whatever is in your paste buffer. Same for using 'x' to
" delete single characters.
vnoremap p "_dP
nnoremap x "_x

" UndoTree
nnoremap <F5> :UndotreeToggle<CR>
let g:undotree_WindowLayout = 2  " See https://github.com/mbbill/undotree/blob/master/plugin/undotree.vim#L15
let g:undotree_SplitWidth = 35
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_RelativeTimestamp = 1

" GitGutter styling to use Â· instead of +/-, credit of https://github.com/statico
let g:gitgutter_sign_added = 'â–Œ'
let g:gitgutter_sign_modified = 'â–Œ'
let g:gitgutter_sign_removed = 'â–Œ'
let g:gitgutter_override_sign_column_highlight = 0
highlight clear SignColumn
highlight GitGutterAdd ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1
highlight GitGutterChangeDelete ctermfg=4

" Switch line numbers on and off
nnoremap <leader>tl         :set relativenumber! nu!<CR>
