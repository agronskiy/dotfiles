" Some random settings, mostly copied over from various nice resources.

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')
Plug 'agronskiy/vim-code-dark'      " Slightly modified from 'tomasiser/vim-code-dark'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Lightline for buffers etc
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

Plug 'tpope/vim-commentary'         " Comments

" File browser
Plug 'scrooloose/nerdtree'

" Undo tree
Plug 'mbbill/undotree'

" Git related
Plug 'airblade/vim-gitgutter'

" FZF support
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'chengzeyi/fzf-preview.vim'  " Better preview support

" Multiple cources
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Vim start page
Plug 'mhinz/vim-startify'

" Trailing whitespaces
Plug 'ntpeters/vim-better-whitespace'

" Conquer of completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'antoinemadec/coc-fzf'

Plug 'ojroques/vim-oscyank', {'branch': 'main'}

call plug#end()

" TODO(agronskiy): need to understand the below, blindly copied from https://stevelosh.com/blog/2010/09/coming-home-to-vim/#s1-some-background-about-me
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

filetype plugin indent on

colorscheme codedark
syntax on

set nocompatible

set modelines=0

" Undo, backup and co
if !isdirectory($HOME.'/.vim/.undo')
    call mkdir( $HOME.'/.vim/.undo', "p")
endif
set undodir=~/.vim/.undo/,/tmp//
set undofile

set noswapfile
set nobackup

" Standard stuff a.k.a. common sense
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set encoding=utf-8
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set cursorline
set ttyfast
set ruler
set laststatus=2
set cmdheight=2

" Make 0 go to the first character rather than the beginning of the line. When
" than empty space. If you want the traditional beginning of line, use ^.
nnoremap 0 ^
nnoremap ^ 0

" Behavior of visual margins to top/bottom when scrolling
set scrolloff=6         " Start scrolling when we're N lines away from margins
set sidescroll=5        " Do the same thing for sideways scrolling
set sidescrolloff=15

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Write buffer when losing focus
augroup AutoWrite
    autocmd! BufLeave * :update
augroup END
set autowrite

" This sets hybrid line numbering, see https://jeffkreeftmeijer.com/vim-number/
set number relativenumber
function OnGainFocus()
    set number relativenumber
    GitGutterEnable
endfunction
function OnLoseFocus()
    set number relativenumber
    GitGutterEnable
endfunction
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * call OnGainFocus()
  autocmd BufLeave,FocusLost,InsertEnter   * call OnLoseFocus()
augroup END

" Save on losing focus
au  FocusLost * silent! wa

" Timeout - wait indefinitely after leader pressed
set notimeout
set ttimeout
let mapleader = " "

" Make vim use standard regexp when searching
nnoremap / /\v
vnoremap / /\v

" Other searching capabilities
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

set wrap
set textwidth=99
set formatoptions=qrn1
set colorcolumn=100

" Standard way of navigating wrapped lines.
nnoremap j gj
nnoremap k gk

" F1 to escape
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap ; :

" Strip trailing spaces
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Fast exit from the insert mode
inoremap jk <ESC>

" Create window, navigate windows
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Navigate buffers
nnoremap <silent> <C-k> :bnext<CR>:call SyncTree()<CR>
nnoremap <silent> <C-j> :bprev<CR>:call SyncTree()<CR>

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" w!! to write a file as sudo
" stolen from Steve Losh
cmap w!! w !sudo tee % >/dev/null

" Toggle NERDTree using Ctrl-T.
nnoremap <C-T> :NERDTreeToggle<CR>

" (nt = nerd tree find) find the current file in the nerdtree.
nnoremap <leader>nt :NERDTreeFind<cr>

" Automatically quit if the only window left is NERDTree
"   (i.e. `:bd` when focused in the NERDTree)
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" >> Begin of sync with nerdtree
" Check if NERDTree is open or active
function! IsNERDTreeOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
  if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction

" Highlight currently open buffer in NERDTree
autocmd BufRead * call SyncTree()
" >> End of sync with nerdtree

" NerdTree configuration
let NERDTreeShowHidden=1
let g:NERDTreeWinPos = "right"
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeWinSize=55

" Configure lightline
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"ðŸ”’":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*FugitiveHead")?FugitiveHead():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())'
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['close'] ]
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel'
      \ }
      \ }

" Configure tabs for lightline
set showtabline=2
let g:lightline#bufferline#show_number=1

" Update time for gitgutter
set updatetime=100

" FZF bindings
nnoremap <leader>ff            :FZFFiles<CR>
nnoremap <leader>bb            :Buffers<CR>
nnoremap <leader>ll            :FZFBLines<CR>
nnoremap <leader>LL            :Lines<CR>
nnoremap <silent>HH            :FZFHistory:<CR>
nnoremap <leader>CC            :Commands<CR>

" Multiline ripgrep
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \    'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
      \     fzf_preview#p(<bang>0, {'options': '--delimiter : --nth 3..'}),
      \     <bang>0
      \)

command! -bang -nargs=* Rgf
      \ call fzf#vim#grep(
      \    'rg --multiline --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
      \     fzf_preview#p(<bang>0, {'options': '--delimiter : --nth 3..'}),
      \     <bang>0
      \)

nnoremap <leader>rg            :Rg<CR>

" `:RG`  and `:RGM` are ripgrep where no fuzzy search is done.
" https://github.com/junegunn/fzf.vim#example-advanced-ripgrep-integration
function! __RG(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--prompt', 'RgNoFZF:> ', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

function!__RGM(query, fullscreen)
  let command_fmt = 'rg --multiline --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--prompt', 'RgNoFZF:> ', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call __RG(<q-args>, <bang>0)
command! -nargs=* -bang RGM call __RGM(<q-args>, <bang>0)


" FZF preview window setup
" See `man fzf-tmux` for available options
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,90%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
endif
let g:fzf_preview_window = ['up:60%']

" Other buffer-related bindings
nnoremap <silent> <leader>bn            :enew<CR>

" Buffer closing
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nnoremap <leader>bq :<C-U>bp <BAR> bd #<CR>
" Buffer only - all other buffers will be closed
command BufOnly silent! execute "%bd|e#|bd#"
nnoremap <leader>bo :BufOnly<CR>

" Show list and offer to choose by number (alternative to the above FZF)
nnoremap <leader>BB :ls<CR>:b<Space>

" If you visually select something and hit paste that thing gets yanked into
" your buffer. This generally is annoying when you're copying one item and
" repeatedly pasting it. This changes the paste command in visual mode so that
" it doesn't overwrite whatever is in your paste buffer. Same for using 'x' to
" delete single characters.
vnoremap p "_dP
nnoremap x "_x

" UndoTree
nnoremap <F5> :UndotreeToggle<CR>
let g:undotree_WindowLayout = 2  " See https://github.com/mbbill/undotree/blob/master/plugin/undotree.vim#L15
let g:undotree_SplitWidth = 35
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_RelativeTimestamp = 1

" GitGutter styling to use Â· instead of +/-, credit of https://github.com/statico
let g:gitgutter_sign_added = 'â–Œ'
let g:gitgutter_sign_modified = 'â–Œ'
let g:gitgutter_sign_removed = 'â–Œ'
let g:gitgutter_override_sign_column_highlight = 0
highlight clear SignColumn
highlight GitGutterAdd ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1
highlight GitGutterChangeDelete ctermfg=4

" Temporrily switch line numbers on and off
nnoremap <leader>tl         :set relativenumber! nu!<CR> :GitGutterToggle<CR>

" coc.nvim support
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Search for visually selected text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

" OSCYank for copying
nmap <leader>c <Plug>OSCYankOperator
nmap <leader>cc <leader>c_
vmap <leader>c <Plug>OSCYankVisual

" Copy on every `y` operation
autocmd TextYankPost *
    \ if v:event.operator is 'y' && v:event.regname is '' |
    \ execute 'OSCYankRegister "' |
    \ endif
